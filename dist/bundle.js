!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=4)}([function(e,t,o){var n=o(1),r=o(2);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(r,a);e.exports=r.locals||{}},function(e,t,o){"use strict";var n,r=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var o=document.querySelector(t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}e[t]=o}return e[t]}}(),i=[];function s(e){for(var t=-1,o=0;o<i.length;o++)if(i[o].identifier===e){t=o;break}return t}function c(e,t){for(var o={},n=[],r=0;r<e.length;r++){var a=e[r],c=t.base?a[0]+t.base:a[0],l=o[c]||0,d="".concat(c," ").concat(l);o[c]=l+1;var p=s(d),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(i[p].references++,i[p].updater(f)):i.push({identifier:d,updater:b(f,t),references:1}),n.push(d)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var r=o.nc;r&&(n.nonce=r)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var d,p=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function f(e,t,o,n){var r=o?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=p(t,r);else{var a=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function u(e,t,o){var n=o.css,r=o.media,a=o.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,v=0;function b(e,t){var o,n,r;if(t.singleton){var a=v++;o=m||(m=l(t)),n=f.bind(null,o,a,!1),r=f.bind(null,o,a,!0)}else o=l(t),n=u.bind(null,o,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(o)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var o=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<o.length;n++){var r=s(o[n]);i[r].references--}for(var a=c(e,t),l=0;l<o.length;l++){var d=s(o[l]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}o=a}}}},function(e,t,o){(t=o(3)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=MuseoModerno:wght@100;900&display=swap);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Piedra&display=swap);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Holtwood+One+SC&display=swap);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Acme&display=swap);"]),t.push([e.i,'@keyframes new_buttton_animation{from{background-color:#fff;width:4rem;height:3rem}to{background-color:#9acd32;width:4.5rem;height:3.5rem}}.navbar{height:5rem;background-color:#111}.navbar .navbar-brand{font-size:2.5rem;font-family:"Piedra",cursive;color:#f0eddb}.navbar .new_buttton{position:absolute;right:5rem;background-color:#fff;width:4rem;height:3rem;border-radius:25px;font-size:1.5rem;font-weight:800;font-family:"Acme",sans-serif}.navbar .new_buttton:hover{animation-name:new_buttton_animation;animation-duration:1.2s;background-color:#9acd32;width:4.5rem;height:3.5rem;cursor:cell}.sidenav{height:100%;width:160px;position:fixed;z-index:1;top:0;left:0;background-color:#111;overflow-x:hidden;padding-top:5rem}.sidenav .general{margin-bottom:3rem}.sidenav .general a{padding:6px 8px 6px 16px;text-decoration:none;font-size:25px;color:#818181;display:block}.sidenav .projects_text{text-align:center;background-color:#918a8a;margin-top:1rem;font-size:20px;color:#fff;display:block}@keyframes p_names_animation{from{background-color:#726f6f}to{background-color:#fff}}.sidenav #projects{max-height:10rem;overflow-y:hidden}.sidenav #projects a{color:#fff}.sidenav #projects a:hover{animation-name:p_names_animation;animation-duration:.5s;color:#000;background-color:#fff;cursor:pointer}.sidenav #projects::-webkit-scrollbar{display:none}.sidenav a:hover{color:#f1f1f1}@keyframes example{from{background-color:#000;color:#080000;-webkit-box-shadow:0px 0px 68px 89px rgba(0,0,0,.75);-moz-box-shadow:0px 0px 68px 89px rgba(0,0,0,.75);box-shadow:0px 0px 68px 89px rgba(0,0,0,.75)}to{background-color:gray;color:#f0eddb;-webkit-box-shadow:0px 0px 68px 0px rgba(0,0,0,.75);-moz-box-shadow:0px 0px 68px 0px rgba(0,0,0,.75);box-shadow:0px 0px 68px 0px rgba(0,0,0,.75)}}.nothing_here{padding:2rem;background-color:gray;margin-top:11rem;color:#f0eddb;font-size:2rem;font-weight:700;font-family:"MuseoModerno",cursive;animation-name:example;animation-duration:4s;-webkit-box-shadow:0px 0px 68px 0px rgba(0,0,0,.75);-moz-box-shadow:0px 0px 68px 0px rgba(0,0,0,.75);box-shadow:0px 0px 68px 0px rgba(0,0,0,.75)}.step_div{width:100%;position:relative;left:5rem;height:auto}.step_div div{border:1px solid #000;height:100%;border-radius:8px}.step_div .allsteps_title{background-color:#e8ecf1;font-family:"Holtwood One SC",serif;height:4rem;border-radius:20px !important}.step_div .allsteps_title span{position:relative;left:-2.5rem}.step_div .single_step{height:2rem;margin-bottom:.5rem}.step_div .single_step .project_name{width:11rem;background-color:#e8ecf1}.step_div .single_step .project_name_fix{width:11rem;background-color:#e8ecf1;font-family:"Holtwood One SC",serif}.step_div .single_step .death_line_fix{width:6.5rem;padding-left:.5rem;padding-right:.5rem;font-size:.7rem;font-family:"Holtwood One SC",serif;background-color:#e8ecf1}.step_div .single_step .step_name{width:45rem;background-color:#f5f5f5}.step_div .single_step .step_name_fix{width:45rem;background-color:#f5f5f5;font-family:"Holtwood One SC",serif}.step_div .single_step .priority{width:6rem}.step_div .single_step .priority_fix{width:6rem;font-family:"Holtwood One SC",serif;background-color:#e8ecf1;font-size:.8rem}.step_div .single_step .erase_link{background-color:#f5f5f5}.step_div .single_step .completed_link{background-color:#f5f5f5}.step_div .single_step .death_line{background-color:#f5f5f5;padding-left:.5rem;padding-right:.5rem}',""]),e.exports=t},function(e,t,o){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o=function(e,t){var o=e[1]||"",n=e[3];if(!n)return o;if(t&&"function"==typeof btoa){var r=(i=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[o].concat(a).concat([r]).join("\n")}var i,s,c;return[o].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(o,"}"):o})).join("")},t.i=function(e,o,n){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(n)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);n&&r[c[0]]||(o&&(c[2]?c[2]="".concat(o," and ").concat(c[2]):c[2]=o),t.push(c))}},t}},function(e,t,o){"use strict";o.r(t);o(0);var n=((e,t)=>{const o=[];return{projectName:void 0,projectSteps:o,projectDescription:void 0,addStep:e=>{e.stepProject=void 0,o.push(e)}}})();var r={create:(e,t)=>!Object.keys(localStorage).includes(e)&&(localStorage.setItem(e,JSON.stringify(t)),!0),erase:e=>(Object.keys(localStorage).includes(e)&&localStorage.removeItem(e),!1),read:e=>{if(Object.keys(localStorage).includes(e))return JSON.parse(localStorage.getItem(e))},All_projects:()=>Object.keys(localStorage)};var a=()=>{const e=n,t=document.querySelector("#project-name").value,o=document.querySelector("#project-description").value;e.projectName=t,e.projectDescription=o,["project-name","project-description"].forEach(e=>{document.querySelector("#"+e).value=""}),r.create(e.projectName,e),console.log("one; ",e),console.log("console log NAME: ",e.projectName),s()};var i=()=>{document.getElementById("body").innerHTML+='\n                \n                <div class="sidenav">\n                    <div class="general">\n                        <a href="#about">All Projects</a>\n                        <a href="#services">All Steps</a>\n                    </div>\n                \n                    <div class="projects_text">\n                        Your Projects\n                    </div>\n                    <div id="projects" class=\'d-flex flex-column text-center overflow-auto\'>\n                        ...\n                    </div>\n                    <div class="projects_text">\n                        Your Steps\n                    </div>\n                    <div id="steps">\n                        ...\n                    </div>\n                </div>\n\n                <div class="main container mt-5" id=\'main\'>\n                    \n                </div>\n\n    ';const e=document.getElementById("projects");Object.entries(localStorage).forEach(t=>{const o=`\n        <a>${t[0]}</a>\n        `;console.log(t),e.innerHTML+=o})};var s=()=>{const e=document.getElementById("body");e.innerHTML="";e.innerHTML+='\n                <nav class="navbar d-flex justify-content-center">\n                    <a class="navbar-brand" href="#">easy2do</a>\n                    <a class="new_buttton d-flex justify-content-center align-items-center" id = \'new_project\' data-toggle="modal" data-target="#new_project_modal"> NEW </a>\n                </nav>\n                \n\n                <div class="modal fade" id="new_project_modal" tabindex="-1" role="dialog" aria-labelledby="new_project_modal" aria-hidden="true">\n                    <div class="modal-dialog" role="document">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                        <h5 class="modal-title" id="exampleModalLabel">New message</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                        </div>\n                        <div class="modal-body">\n                        <form>\n                            <div class="form-group">\n                            <label for="recipient-name" class="col-form-label">Project Name:</label>\n                            <input type="text" class="form-control" id="project-name">\n                            </div>\n                            <div class="form-group">\n                            <label for="message-text" class="col-form-label">Description:</label>\n                            <input class="form-control" id="project-description">\n                            </div>\n                        </form>\n                        </div>\n                        <div class="modal-footer">\n                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n                        <button type="button" class="btn btn-primary" data-dismiss="modal" id = \'save\' >Save</button>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n    ',i();document.getElementById("save").addEventListener("click",(function(){a()}))};s()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,